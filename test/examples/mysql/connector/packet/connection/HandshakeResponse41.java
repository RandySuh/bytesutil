package examples.mysql.connector.packet.connection;

import java.util.List;

import examples.mysql.connector.datatypes.le.LEInteger;
import examples.mysql.connector.datatypes.string.LengthEncodedString;
import io.github.zhtmf.DataPacket;
import io.github.zhtmf.annotations.modifiers.Conditional;
import io.github.zhtmf.annotations.modifiers.EndsWith;
import io.github.zhtmf.annotations.modifiers.Length;
import io.github.zhtmf.annotations.modifiers.ListLength;
import io.github.zhtmf.annotations.modifiers.LittleEndian;
import io.github.zhtmf.annotations.modifiers.Order;
import io.github.zhtmf.annotations.modifiers.Script;
import io.github.zhtmf.annotations.modifiers.Signed;
import io.github.zhtmf.annotations.modifiers.Unsigned;
import io.github.zhtmf.annotations.types.BYTE;
import io.github.zhtmf.annotations.types.CHAR;
import io.github.zhtmf.annotations.types.INT;
import io.github.zhtmf.annotations.types.RAW;
import io.github.zhtmf.converters.auxiliary.DataType;

@Unsigned
@LittleEndian
public class HandshakeResponse41 extends DataPacket{

    @Order(0)
    @INT
    @Signed
    //Capabilities Flags, CLIENT_PROTOCOL_41 always set.
    public long clientCapabilities;
    
    @Order(1)
    @INT
    public long maxPacketSize;
    
    @Order(2)
    @BYTE
    //  client charset a_protocol_character_set, only the lower 8-bits
    public int charSet;
    
    @Order(3)
    @RAW(23)
    //filler to the size of the handhshake response packet. All 0s.
    public byte[] filler = new byte[23];
    
    @Order(4)
    @CHAR
    @EndsWith({'\0'})
    public String username;
    
    /*
     * opaque authentication response data generated by 
     * Authentication Method indicated by the plugin name field.
     */
    @Order(5)
    @Conditional(scripts = @Script("(entity.clientCapabilities & " 
    +ClientCapabilities.CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA +") != 0"))
    public LengthEncodedString authResponse;
    @Order(6)
    @CHAR
    @Length(type=DataType.BYTE)
    @Conditional(negative=true, scripts = @Script("(entity.clientCapabilities & " 
            +ClientCapabilities.CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA +") != 0"))
    public String authResponseWithLength;
    
    @Order(7)
    @CHAR
    @EndsWith({'\0'})
    @Conditional(scripts = @Script("(entity.clientCapabilities & " 
            +ClientCapabilities.CLIENT_CONNECT_WITH_DB +") != 0"))
    public String database;
    
    @Order(8)
    @CHAR
    @EndsWith({'\0'})
    @Conditional(scripts = @Script("(entity.clientCapabilities & " 
            +ClientCapabilities.CLIENT_PLUGIN_AUTH +") != 0"))
    public String clientPluginName;
    
    @Order(9)
    @Conditional(scripts = @Script("(entity.clientCapabilities & " 
            +ClientCapabilities.CLIENT_CONNECT_ATTRS +") != 0"))
    public ClientConnectAttrs attrs;
    
    public static class ClientConnectAttrs extends DataPacket{
        @Order(0)
        public LEInteger lengthAllkeyValues;
        @Order(1)
        @ListLength(scripts = @Script("entity.lengthAllkeyValues.numericValue"))
        public List<KeyValue> keyValue;
    }
    
    public static class KeyValue extends DataPacket{
        @Order(0)
        public LengthEncodedString key;
        @Order(1)
        public LengthEncodedString value;
        
        public KeyValue() {
        }
        public KeyValue(String k, String v) {
            this.key = new LengthEncodedString(k);
            this.value = new LengthEncodedString(v);
        }
    }
}